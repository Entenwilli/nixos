# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = ["dm-snapshot"];
  boot.kernelParams = ["processor.max_cstate=1" "split_lock_detect=off"];
  boot.kernelModules = ["kvm-amd"];
  boot.extraModulePackages = [];
  boot.kernelPackages = pkgs.linuxPackagesFor pkgs.linux_latest;

  boot.initrd.postResumeCommands = lib.mkAfter ''
    mkdir /btrfs_tmp
    mount /dev/NixOS/Root /btrfs_tmp
    if [[ -e /btrfs_tmp/root ]]; then
        mkdir -p /btrfs_tmp/old_roots
        timestamp=$(date --date="@$(stat -c %Y /btrfs_tmp/root)" "+%Y-%m-%-d_%H:%M:%S")
        mv /btrfs_tmp/root "/btrfs_tmp/old_roots/$timestamp"
    fi

    delete_subvolume_recursively() {
        IFS=$'\n'
        for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
            delete_subvolume_recursively "/btrfs_tmp/$i"
        done
        btrfs subvolume delete "$1"
    }

    for i in $(find /btrfs_tmp/old_roots/ -maxdepth 1 -mtime +7); do
        delete_subvolume_recursively "$i"
    done

    btrfs subvolume create /btrfs_tmp/root
    umount /btrfs_tmp

    mount /dev/NixOS/Home /btrfs_tmp
    if [[ -e /btrfs_tmp/home ]]; then
        mkdir -p /btrfs_tmp/old_homes
        timestamp=$(date --date="@$(stat -c %Y /btrfs_tmp/home)" "+%Y-%m-%-d_%H:%M:%S")
        mv /btrfs_tmp/home "/btrfs_tmp/old_homes/$timestamp"
    fi

    delete_subvolume_recursively() {
        IFS=$'\n'
        for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
            delete_subvolume_recursively "/btrfs_tmp/$i"
        done
        btrfs subvolume delete "$1"
    }

    for i in $(find /btrfs_tmp/old_homes/ -maxdepth 1 -mtime +7); do
        delete_subvolume_recursively "$i"
    done

    btrfs subvolume create /btrfs_tmp/home
    chown -R 1000:1000 /btrfs_tmp/home
    umount /btrfs_tmp

  '';

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/8a247aca-51d3-4a40-8f02-58d338dcdd65";
    fsType = "btrfs";
    options = ["subvol=root"];
  };

  fileSystems."/persistent" = {
    device = "/dev/disk/by-uuid/8a247aca-51d3-4a40-8f02-58d338dcdd65";
    neededForBoot = true;
    fsType = "btrfs";
    options = ["subvol=persistent" "compress=zstd" "noatime"];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/1b4b9852-65f1-41f6-b75f-061a3746b514";
    fsType = "btrfs";
    neededForBoot = true;
    options = ["noatime"];
  };

  fileSystems."/home/felix" = {
    device = "/dev/disk/by-uuid/2ac0fb26-4944-4f30-8655-ba005d00f059";
    fsType = "btrfs";
    options = ["subvol=home"];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/46E4-0291";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };

  fileSystems."/efi" = {
    device = "/dev/disk/by-uuid/9237-E870";
    fsType = "vfat";
    options = ["fmask=0022" "dmask=0022"];
  };
  fileSystems."/steam-library" = {
    device = "/dev/disk/by-uuid/def7cbb4-3114-48ad-8060-d28fd5046e1a";
    fsType = "btrfs";
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/38303ad4-0b74-47b4-ada1-89062250ac84";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp7s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp8s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
